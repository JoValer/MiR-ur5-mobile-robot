// Generated by gencpp from file robotic_vision/DetectArray.msg
// DO NOT EDIT!


#ifndef ROBOTIC_VISION_MESSAGE_DETECTARRAY_H
#define ROBOTIC_VISION_MESSAGE_DETECTARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robotic_vision/Detect.h>

namespace robotic_vision
{
template <class ContainerAllocator>
struct DetectArray_
{
  typedef DetectArray_<ContainerAllocator> Type;

  DetectArray_()
    : numLego(0)
    , detectedLego()  {
    }
  DetectArray_(const ContainerAllocator& _alloc)
    : numLego(0)
    , detectedLego(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _numLego_type;
  _numLego_type numLego;

   typedef std::vector< ::robotic_vision::Detect_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robotic_vision::Detect_<ContainerAllocator> >::other >  _detectedLego_type;
  _detectedLego_type detectedLego;





  typedef boost::shared_ptr< ::robotic_vision::DetectArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotic_vision::DetectArray_<ContainerAllocator> const> ConstPtr;

}; // struct DetectArray_

typedef ::robotic_vision::DetectArray_<std::allocator<void> > DetectArray;

typedef boost::shared_ptr< ::robotic_vision::DetectArray > DetectArrayPtr;
typedef boost::shared_ptr< ::robotic_vision::DetectArray const> DetectArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotic_vision::DetectArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotic_vision::DetectArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotic_vision::DetectArray_<ContainerAllocator1> & lhs, const ::robotic_vision::DetectArray_<ContainerAllocator2> & rhs)
{
  return lhs.numLego == rhs.numLego &&
    lhs.detectedLego == rhs.detectedLego;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotic_vision::DetectArray_<ContainerAllocator1> & lhs, const ::robotic_vision::DetectArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotic_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotic_vision::DetectArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotic_vision::DetectArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotic_vision::DetectArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotic_vision::DetectArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotic_vision::DetectArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotic_vision::DetectArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotic_vision::DetectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bfcfa2b8ca8a76c99cad8c67ea7d1ad";
  }

  static const char* value(const ::robotic_vision::DetectArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bfcfa2b8ca8a76cULL;
  static const uint64_t static_value2 = 0x99cad8c67ea7d1adULL;
};

template<class ContainerAllocator>
struct DataType< ::robotic_vision::DetectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotic_vision/DetectArray";
  }

  static const char* value(const ::robotic_vision::DetectArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotic_vision::DetectArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 numLego\n"
"Detect[] detectedLego\n"
"================================================================================\n"
"MSG: robotic_vision/Detect\n"
"int64 classe\n"
"float64 center_x\n"
"float64 center_y\n"
"float64 width\n"
"float64 height\n"
"float64 confidence\n"
;
  }

  static const char* value(const ::robotic_vision::DetectArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotic_vision::DetectArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.numLego);
      stream.next(m.detectedLego);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotic_vision::DetectArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotic_vision::DetectArray_<ContainerAllocator>& v)
  {
    s << indent << "numLego: ";
    Printer<int64_t>::stream(s, indent + "  ", v.numLego);
    s << indent << "detectedLego[]" << std::endl;
    for (size_t i = 0; i < v.detectedLego.size(); ++i)
    {
      s << indent << "  detectedLego[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robotic_vision::Detect_<ContainerAllocator> >::stream(s, indent + "    ", v.detectedLego[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTIC_VISION_MESSAGE_DETECTARRAY_H
